"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5532],{1493:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=t(4848),s=t(8453);const r={sidebar_position:1},d="Widgets in Depth",a={id:"understanding_ribir/widget_in_depth",title:"Widgets in Depth",description:"In Ribir:",source:"@site/docs/understanding_ribir/widget_in_depth.md",sourceDirName:"understanding_ribir",slug:"/understanding_ribir/widget_in_depth",permalink:"/docs/next/understanding_ribir/widget_in_depth",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"RChangelog[bot]",lastUpdatedAt:1736297527e3,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Understanding Ribir",permalink:"/docs/next/category/understanding-ribir"},next:{title:'Using Ribir without relying on "DSL"',permalink:"/docs/next/understanding_ribir/without_dsl"}},o={},c=[{value:"Pure Composition",id:"pure-composition",level:2},{value:"Four Basic Widgets",id:"four-basic-widgets",level:2}];function l(e){const i={code:"code",h1:"h1",h2:"h2",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"widgets-in-depth",children:"Widgets in Depth"}),"\n",(0,n.jsx)(i.p,{children:"In Ribir:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Views are built as basic units of widgets."}),"\n",(0,n.jsxs)(i.li,{children:["Widgets are composed ",(0,n.jsx)(i.strong,{children:"purely"})," from other widgets."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["What makes Ribir unique is that it uses a ",(0,n.jsx)(i.strong,{children:"pure composition"})," method to compose new widgets."]}),"\n",(0,n.jsx)(i.h2,{id:"pure-composition",children:"Pure Composition"}),"\n",(0,n.jsxs)(i.p,{children:["In the context of ",(0,n.jsx)(i.strong,{children:"pure composition"}),", the parent-child relationship between widgets doesn't imply ownership. A parent widget can associate with child widgets via a trait agreement, without claiming ownership over them."]}),"\n",(0,n.jsxs)(i.p,{children:["Typically, in other frameworks, the data structure allows a parent to contain its children via a property, often named ",(0,n.jsx)(i.code,{children:"children"}),". Like this:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",children:'struct Parent {\n  property: &\'static str,\n  children: Vec<Child>,\n}\n\nstruct Child {\n  property: &\'static str,\n}\n\nlet widget = Parent {\n  property: "parent",\n  children: vec![\n    Child { property: "child1" },\n    Child { property: "child2" },\n  ],\n};\n'})}),"\n",(0,n.jsx)(i.p,{children:"But in Ribir, the data structure is like this:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",metastring:"ignore",children:'\nstruct Parent {\n  property: &\'static str,\n}\n\nstruct Child {\n  property: &\'static str,\n}\n\n\nlet parent = Parent { property: "parent" };\nlet child1 = Child { property: "child1" };\nlet child2 = Child { property: "child2" };\n\nlet widget = MultiPair {\n  parent,\n  children: vec![child1, child2],\n};\n'})}),"\n",(0,n.jsx)(i.p,{children:"Parent and child widgets are entirely independent and transparent, with no child widgets being added directly to the parent widget."}),"\n",(0,n.jsxs)(i.p,{children:["Of course, this is just a simplified example. In fact, Ribir's composition method is more flexible, and in actual use, you will not deal with intermediate data structures like ",(0,n.jsx)(i.code,{children:"MultiPair"}),"."]}),"\n",(0,n.jsx)(i.p,{children:"The advantage of this composition method is that it produces smaller, purer, and more reusable widgets that can be composed as needed. Let's use Ribir's built-in widgets as an example to illustrate this point."}),"\n",(0,n.jsxs)(i.p,{children:["In traditional GUI frameworks, we often inherit from a base object (or use a similar approach) to gain a set of common features. This base object usually has many properties, making it quite large. Instead, Ribir gets these features by combining small built-in widgets as needed.  For example, the ",(0,n.jsx)(i.code,{children:"Opacity"})," widget in Ribir has just one ",(0,n.jsx)(i.code,{children:"f32"})," property. When you need to adjust a widget's opacity, you can simply compose it with the ",(0,n.jsx)(i.code,{children:"Opacity"})," widget."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",metastring:"ignore",children:"use ribir::prelude::*;\n\n// The definition of Opacity is like this:\n// struct Opacity { opacity: f64 }\n\nlet w = Opacity { opacity: 0.5 }.with_child(Void, ctx);\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Of course, in actual code, you can directly write ",(0,n.jsx)(i.code,{children:"@Void { opacity: 0.5 }"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"four-basic-widgets",children:"Four Basic Widgets"}),"\n",(0,n.jsxs)(i.ul,{className:"contains-task-list",children:["\n",(0,n.jsxs)(i.li,{className:"task-list-item",children:[(0,n.jsx)(i.input,{type:"checkbox",disabled:!0})," ","render widget"]}),"\n",(0,n.jsxs)(i.li,{className:"task-list-item",children:[(0,n.jsx)(i.input,{type:"checkbox",disabled:!0})," ","compose widget"]}),"\n",(0,n.jsxs)(i.li,{className:"task-list-item",children:[(0,n.jsx)(i.input,{type:"checkbox",disabled:!0})," ","compose child widget"]}),"\n",(0,n.jsxs)(i.li,{className:"task-list-item",children:[(0,n.jsx)(i.input,{type:"checkbox",disabled:!0})," ","function widget"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Coming soon"})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>d,x:()=>a});var n=t(6540);const s={},r=n.createContext(s);function d(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);